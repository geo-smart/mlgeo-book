Traceback (most recent call last):
  File "/usr/share/miniconda3/envs/geosmart/lib/python3.10/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/usr/share/miniconda3/envs/geosmart/lib/python3.10/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/usr/share/miniconda3/envs/geosmart/lib/python3.10/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/usr/share/miniconda3/envs/geosmart/lib/python3.10/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/usr/share/miniconda3/envs/geosmart/lib/python3.10/asyncio/base_events.py", line 646, in run_until_complete
    return future.result()
  File "/usr/share/miniconda3/envs/geosmart/lib/python3.10/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/usr/share/miniconda3/envs/geosmart/lib/python3.10/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/usr/share/miniconda3/envs/geosmart/lib/python3.10/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
from sklearn.model_selection import cross_val_predict
y_train_pred = cross_val_predict(clf, X_train, y_train, cv=3) # predict using K-fold cross validation
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mValueError[0m                                Traceback (most recent call last)
Input [0;32mIn [21][0m, in [0;36m<cell line: 2>[0;34m()[0m
[1;32m      1[0m [38;5;28;01mfrom[39;00m [38;5;21;01msklearn[39;00m[38;5;21;01m.[39;00m[38;5;21;01mmodel_selection[39;00m [38;5;28;01mimport[39;00m cross_val_predict
[0;32m----> 2[0m y_train_pred [38;5;241m=[39m [43mcross_val_predict[49m[43m([49m[43mclf[49m[43m,[49m[43m [49m[43mX_train[49m[43m,[49m[43m [49m[43my_train[49m[43m,[49m[43m [49m[43mcv[49m[38;5;241;43m=[39;49m[38;5;241;43m3[39;49m[43m)[49m

File [0;32m/usr/share/miniconda3/envs/geosmart/lib/python3.10/site-packages/sklearn/utils/_param_validation.py:213[0m, in [0;36mvalidate_params.<locals>.decorator.<locals>.wrapper[0;34m(*args, **kwargs)[0m
[1;32m    207[0m [38;5;28;01mtry[39;00m:
[1;32m    208[0m     [38;5;28;01mwith[39;00m config_context(
[1;32m    209[0m         skip_parameter_validation[38;5;241m=[39m(
[1;32m    210[0m             prefer_skip_nested_validation [38;5;129;01mor[39;00m global_skip_validation
[1;32m    211[0m         )
[1;32m    212[0m     ):
[0;32m--> 213[0m         [38;5;28;01mreturn[39;00m [43mfunc[49m[43m([49m[38;5;241;43m*[39;49m[43margs[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m
[1;32m    214[0m [38;5;28;01mexcept[39;00m InvalidParameterError [38;5;28;01mas[39;00m e:
[1;32m    215[0m     [38;5;66;03m# When the function is just a wrapper around an estimator, we allow[39;00m
[1;32m    216[0m     [38;5;66;03m# the function to delegate validation to the estimator, but we replace[39;00m
[1;32m    217[0m     [38;5;66;03m# the name of the estimator by the name of the function in the error[39;00m
[1;32m    218[0m     [38;5;66;03m# message to avoid confusion.[39;00m
[1;32m    219[0m     msg [38;5;241m=[39m re[38;5;241m.[39msub(
[1;32m    220[0m         [38;5;124mr[39m[38;5;124m"[39m[38;5;124mparameter of [39m[38;5;124m\[39m[38;5;124mw+ must be[39m[38;5;124m"[39m,
[1;32m    221[0m         [38;5;124mf[39m[38;5;124m"[39m[38;5;124mparameter of [39m[38;5;132;01m{[39;00mfunc[38;5;241m.[39m[38;5;18m__qualname__[39m[38;5;132;01m}[39;00m[38;5;124m must be[39m[38;5;124m"[39m,
[1;32m    222[0m         [38;5;28mstr[39m(e),
[1;32m    223[0m     )

File [0;32m/usr/share/miniconda3/envs/geosmart/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:1293[0m, in [0;36mcross_val_predict[0;34m(estimator, X, y, groups, cv, n_jobs, verbose, fit_params, params, pre_dispatch, method)[0m
[1;32m   1290[0m [38;5;66;03m# We clone the estimator to make sure that all the folds are[39;00m
[1;32m   1291[0m [38;5;66;03m# independent, and that it is pickle-able.[39;00m
[1;32m   1292[0m parallel [38;5;241m=[39m Parallel(n_jobs[38;5;241m=[39mn_jobs, verbose[38;5;241m=[39mverbose, pre_dispatch[38;5;241m=[39mpre_dispatch)
[0;32m-> 1293[0m predictions [38;5;241m=[39m [43mparallel[49m[43m([49m
[1;32m   1294[0m [43m    [49m[43mdelayed[49m[43m([49m[43m_fit_and_predict[49m[43m)[49m[43m([49m
[1;32m   1295[0m [43m        [49m[43mclone[49m[43m([49m[43mestimator[49m[43m)[49m[43m,[49m
[1;32m   1296[0m [43m        [49m[43mX[49m[43m,[49m
[1;32m   1297[0m [43m        [49m[43my[49m[43m,[49m
[1;32m   1298[0m [43m        [49m[43mtrain[49m[43m,[49m
[1;32m   1299[0m [43m        [49m[43mtest[49m[43m,[49m
[1;32m   1300[0m [43m        [49m[43mrouted_params[49m[38;5;241;43m.[39;49m[43mestimator[49m[38;5;241;43m.[39;49m[43mfit[49m[43m,[49m
[1;32m   1301[0m [43m        [49m[43mmethod[49m[43m,[49m
[1;32m   1302[0m [43m    [49m[43m)[49m
[1;32m   1303[0m [43m    [49m[38;5;28;43;01mfor[39;49;00m[43m [49m[43mtrain[49m[43m,[49m[43m [49m[43mtest[49m[43m [49m[38;5;129;43;01min[39;49;00m[43m [49m[43msplits[49m
[1;32m   1304[0m [43m[49m[43m)[49m
[1;32m   1306[0m inv_test_indices [38;5;241m=[39m np[38;5;241m.[39mempty([38;5;28mlen[39m(test_indices), dtype[38;5;241m=[39m[38;5;28mint[39m)
[1;32m   1307[0m inv_test_indices[test_indices] [38;5;241m=[39m np[38;5;241m.[39marange([38;5;28mlen[39m(test_indices))

File [0;32m/usr/share/miniconda3/envs/geosmart/lib/python3.10/site-packages/sklearn/utils/parallel.py:67[0m, in [0;36mParallel.__call__[0;34m(self, iterable)[0m
[1;32m     62[0m config [38;5;241m=[39m get_config()
[1;32m     63[0m iterable_with_config [38;5;241m=[39m (
[1;32m     64[0m     (_with_config(delayed_func, config), args, kwargs)
[1;32m     65[0m     [38;5;28;01mfor[39;00m delayed_func, args, kwargs [38;5;129;01min[39;00m iterable
[1;32m     66[0m )
[0;32m---> 67[0m [38;5;28;01mreturn[39;00m [38;5;28;43msuper[39;49m[43m([49m[43m)[49m[38;5;241;43m.[39;49m[38;5;21;43m__call__[39;49m[43m([49m[43miterable_with_config[49m[43m)[49m

File [0;32m/usr/share/miniconda3/envs/geosmart/lib/python3.10/site-packages/joblib/parallel.py:1863[0m, in [0;36mParallel.__call__[0;34m(self, iterable)[0m
[1;32m   1861[0m     output [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39m_get_sequential_output(iterable)
[1;32m   1862[0m     [38;5;28mnext[39m(output)
[0;32m-> 1863[0m     [38;5;28;01mreturn[39;00m output [38;5;28;01mif[39;00m [38;5;28mself[39m[38;5;241m.[39mreturn_generator [38;5;28;01melse[39;00m [38;5;28;43mlist[39;49m[43m([49m[43moutput[49m[43m)[49m
[1;32m   1865[0m [38;5;66;03m# Let's create an ID that uniquely identifies the current call. If the[39;00m
[1;32m   1866[0m [38;5;66;03m# call is interrupted early and that the same instance is immediately[39;00m
[1;32m   1867[0m [38;5;66;03m# re-used, this id will be used to prevent workers that were[39;00m
[1;32m   1868[0m [38;5;66;03m# concurrently finalizing a task from the previous call to run the[39;00m
[1;32m   1869[0m [38;5;66;03m# callback.[39;00m
[1;32m   1870[0m [38;5;28;01mwith[39;00m [38;5;28mself[39m[38;5;241m.[39m_lock:

File [0;32m/usr/share/miniconda3/envs/geosmart/lib/python3.10/site-packages/joblib/parallel.py:1792[0m, in [0;36mParallel._get_sequential_output[0;34m(self, iterable)[0m
[1;32m   1790[0m [38;5;28mself[39m[38;5;241m.[39mn_dispatched_batches [38;5;241m+[39m[38;5;241m=[39m [38;5;241m1[39m
[1;32m   1791[0m [38;5;28mself[39m[38;5;241m.[39mn_dispatched_tasks [38;5;241m+[39m[38;5;241m=[39m [38;5;241m1[39m
[0;32m-> 1792[0m res [38;5;241m=[39m [43mfunc[49m[43m([49m[38;5;241;43m*[39;49m[43margs[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m
[1;32m   1793[0m [38;5;28mself[39m[38;5;241m.[39mn_completed_tasks [38;5;241m+[39m[38;5;241m=[39m [38;5;241m1[39m
[1;32m   1794[0m [38;5;28mself[39m[38;5;241m.[39mprint_progress()

File [0;32m/usr/share/miniconda3/envs/geosmart/lib/python3.10/site-packages/sklearn/utils/parallel.py:129[0m, in [0;36m_FuncWrapper.__call__[0;34m(self, *args, **kwargs)[0m
[1;32m    127[0m     config [38;5;241m=[39m {}
[1;32m    128[0m [38;5;28;01mwith[39;00m config_context([38;5;241m*[39m[38;5;241m*[39mconfig):
[0;32m--> 129[0m     [38;5;28;01mreturn[39;00m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mfunction[49m[43m([49m[38;5;241;43m*[39;49m[43margs[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m

File [0;32m/usr/share/miniconda3/envs/geosmart/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:1378[0m, in [0;36m_fit_and_predict[0;34m(estimator, X, y, train, test, fit_params, method)[0m
[1;32m   1376[0m     estimator[38;5;241m.[39mfit(X_train, [38;5;241m*[39m[38;5;241m*[39mfit_params)
[1;32m   1377[0m [38;5;28;01melse[39;00m:
[0;32m-> 1378[0m     [43mestimator[49m[38;5;241;43m.[39;49m[43mfit[49m[43m([49m[43mX_train[49m[43m,[49m[43m [49m[43my_train[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mfit_params[49m[43m)[49m
[1;32m   1379[0m func [38;5;241m=[39m [38;5;28mgetattr[39m(estimator, method)
[1;32m   1380[0m predictions [38;5;241m=[39m func(X_test)

File [0;32m/usr/share/miniconda3/envs/geosmart/lib/python3.10/site-packages/sklearn/base.py:1474[0m, in [0;36m_fit_context.<locals>.decorator.<locals>.wrapper[0;34m(estimator, *args, **kwargs)[0m
[1;32m   1467[0m     estimator[38;5;241m.[39m_validate_params()
[1;32m   1469[0m [38;5;28;01mwith[39;00m config_context(
[1;32m   1470[0m     skip_parameter_validation[38;5;241m=[39m(
[1;32m   1471[0m         prefer_skip_nested_validation [38;5;129;01mor[39;00m global_skip_validation
[1;32m   1472[0m     )
[1;32m   1473[0m ):
[0;32m-> 1474[0m     [38;5;28;01mreturn[39;00m [43mfit_method[49m[43m([49m[43mestimator[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[43margs[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m

File [0;32m/usr/share/miniconda3/envs/geosmart/lib/python3.10/site-packages/sklearn/svm/_base.py:190[0m, in [0;36mBaseLibSVM.fit[0;34m(self, X, y, sample_weight)[0m
[1;32m    188[0m     check_consistent_length(X, y)
[1;32m    189[0m [38;5;28;01melse[39;00m:
[0;32m--> 190[0m     X, y [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_validate_data[49m[43m([49m
[1;32m    191[0m [43m        [49m[43mX[49m[43m,[49m
[1;32m    192[0m [43m        [49m[43my[49m[43m,[49m
[1;32m    193[0m [43m        [49m[43mdtype[49m[38;5;241;43m=[39;49m[43mnp[49m[38;5;241;43m.[39;49m[43mfloat64[49m[43m,[49m
[1;32m    194[0m [43m        [49m[43morder[49m[38;5;241;43m=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mC[39;49m[38;5;124;43m"[39;49m[43m,[49m
[1;32m    195[0m [43m        [49m[43maccept_sparse[49m[38;5;241;43m=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mcsr[39;49m[38;5;124;43m"[39;49m[43m,[49m
[1;32m    196[0m [43m        [49m[43maccept_large_sparse[49m[38;5;241;43m=[39;49m[38;5;28;43;01mFalse[39;49;00m[43m,[49m
[1;32m    197[0m [43m    [49m[43m)[49m
[1;32m    199[0m y [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39m_validate_targets(y)
[1;32m    201[0m sample_weight [38;5;241m=[39m np[38;5;241m.[39masarray(
[1;32m    202[0m     [] [38;5;28;01mif[39;00m sample_weight [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m [38;5;28;01melse[39;00m sample_weight, dtype[38;5;241m=[39mnp[38;5;241m.[39mfloat64
[1;32m    203[0m )

File [0;32m/usr/share/miniconda3/envs/geosmart/lib/python3.10/site-packages/sklearn/base.py:650[0m, in [0;36mBaseEstimator._validate_data[0;34m(self, X, y, reset, validate_separately, cast_to_ndarray, **check_params)[0m
[1;32m    648[0m         y [38;5;241m=[39m check_array(y, input_name[38;5;241m=[39m[38;5;124m"[39m[38;5;124my[39m[38;5;124m"[39m, [38;5;241m*[39m[38;5;241m*[39mcheck_y_params)
[1;32m    649[0m     [38;5;28;01melse[39;00m:
[0;32m--> 650[0m         X, y [38;5;241m=[39m [43mcheck_X_y[49m[43m([49m[43mX[49m[43m,[49m[43m [49m[43my[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mcheck_params[49m[43m)[49m
[1;32m    651[0m     out [38;5;241m=[39m X, y
[1;32m    653[0m [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m no_val_X [38;5;129;01mand[39;00m check_params[38;5;241m.[39mget([38;5;124m"[39m[38;5;124mensure_2d[39m[38;5;124m"[39m, [38;5;28;01mTrue[39;00m):

File [0;32m/usr/share/miniconda3/envs/geosmart/lib/python3.10/site-packages/sklearn/utils/validation.py:1279[0m, in [0;36mcheck_X_y[0;34m(X, y, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, multi_output, ensure_min_samples, ensure_min_features, y_numeric, estimator)[0m
[1;32m   1259[0m     [38;5;28;01mraise[39;00m [38;5;167;01mValueError[39;00m(
[1;32m   1260[0m         [38;5;124mf[39m[38;5;124m"[39m[38;5;132;01m{[39;00mestimator_name[38;5;132;01m}[39;00m[38;5;124m requires y to be passed, but the target y is None[39m[38;5;124m"[39m
[1;32m   1261[0m     )
[1;32m   1263[0m X [38;5;241m=[39m check_array(
[1;32m   1264[0m     X,
[1;32m   1265[0m     accept_sparse[38;5;241m=[39maccept_sparse,
[0;32m   (...)[0m
[1;32m   1276[0m     input_name[38;5;241m=[39m[38;5;124m"[39m[38;5;124mX[39m[38;5;124m"[39m,
[1;32m   1277[0m )
[0;32m-> 1279[0m y [38;5;241m=[39m [43m_check_y[49m[43m([49m[43my[49m[43m,[49m[43m [49m[43mmulti_output[49m[38;5;241;43m=[39;49m[43mmulti_output[49m[43m,[49m[43m [49m[43my_numeric[49m[38;5;241;43m=[39;49m[43my_numeric[49m[43m,[49m[43m [49m[43mestimator[49m[38;5;241;43m=[39;49m[43mestimator[49m[43m)[49m
[1;32m   1281[0m check_consistent_length(X, y)
[1;32m   1283[0m [38;5;28;01mreturn[39;00m X, y

File [0;32m/usr/share/miniconda3/envs/geosmart/lib/python3.10/site-packages/sklearn/utils/validation.py:1300[0m, in [0;36m_check_y[0;34m(y, multi_output, y_numeric, estimator)[0m
[1;32m   1298[0m [38;5;28;01melse[39;00m:
[1;32m   1299[0m     estimator_name [38;5;241m=[39m _check_estimator_name(estimator)
[0;32m-> 1300[0m     y [38;5;241m=[39m [43mcolumn_or_1d[49m[43m([49m[43my[49m[43m,[49m[43m [49m[43mwarn[49m[38;5;241;43m=[39;49m[38;5;28;43;01mTrue[39;49;00m[43m)[49m
[1;32m   1301[0m     _assert_all_finite(y, input_name[38;5;241m=[39m[38;5;124m"[39m[38;5;124my[39m[38;5;124m"[39m, estimator_name[38;5;241m=[39mestimator_name)
[1;32m   1302[0m     _ensure_no_complex_data(y)

File [0;32m/usr/share/miniconda3/envs/geosmart/lib/python3.10/site-packages/sklearn/utils/validation.py:1367[0m, in [0;36mcolumn_or_1d[0;34m(y, dtype, warn)[0m
[1;32m   1356[0m         warnings[38;5;241m.[39mwarn(
[1;32m   1357[0m             (
[1;32m   1358[0m                 [38;5;124m"[39m[38;5;124mA column-vector y was passed when a 1d array was[39m[38;5;124m"[39m
[0;32m   (...)[0m
[1;32m   1363[0m             stacklevel[38;5;241m=[39m[38;5;241m2[39m,
[1;32m   1364[0m         )
[1;32m   1365[0m     [38;5;28;01mreturn[39;00m _asarray_with_order(xp[38;5;241m.[39mreshape(y, ([38;5;241m-[39m[38;5;241m1[39m,)), order[38;5;241m=[39m[38;5;124m"[39m[38;5;124mC[39m[38;5;124m"[39m, xp[38;5;241m=[39mxp)
[0;32m-> 1367[0m [38;5;28;01mraise[39;00m [38;5;167;01mValueError[39;00m(
[1;32m   1368[0m     [38;5;124m"[39m[38;5;124my should be a 1d array, got an array of shape [39m[38;5;132;01m{}[39;00m[38;5;124m instead.[39m[38;5;124m"[39m[38;5;241m.[39mformat(shape)
[1;32m   1369[0m )

[0;31mValueError[0m: y should be a 1d array, got an array of shape (598, 10) instead.
ValueError: y should be a 1d array, got an array of shape (598, 10) instead.

