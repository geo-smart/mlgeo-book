Traceback (most recent call last):
  File "/usr/share/miniconda3/envs/geosmart/lib/python3.10/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/usr/share/miniconda3/envs/geosmart/lib/python3.10/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/usr/share/miniconda3/envs/geosmart/lib/python3.10/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/usr/share/miniconda3/envs/geosmart/lib/python3.10/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/usr/share/miniconda3/envs/geosmart/lib/python3.10/asyncio/base_events.py", line 646, in run_until_complete
    return future.result()
  File "/usr/share/miniconda3/envs/geosmart/lib/python3.10/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/usr/share/miniconda3/envs/geosmart/lib/python3.10/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/usr/share/miniconda3/envs/geosmart/lib/python3.10/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# Download seismic data
network = 'UW'
station = 'RATT'
channel = 'HHZ'# this channel gives a low frequency, 1Hz signal.
Tstart = UTCDateTime(2021,7,29,6,15)
Tend = Tstart+7200# UTCDateTime(year=2022, month=10, day=8)
fdsn_client = fdsn.Client('IRIS') # client to query the IRIS DMC server

# call to download the specific data: earthquake waveforms
Z = fdsn_client.get_waveforms(network=network, station=station, location='--', channel=channel, starttime=Tstart, \
    endtime=Tend, attach_response=True)
# basic pre-processing: merge all data if there is gaps, detrend, taper,
#  remove the seismic instrumental response to go from the digitizer units to ground motion (velocity) units.
Z.merge(); Z.detrend(type='linear'); Z[0].taper(max_percentage=0.05)


# call to download the specific data: noise waveforms
N = fdsn_client.get_waveforms(network=network, station=station, location='--', channel=channel, starttime=Tstart-7200, \
    endtime=Tstart, attach_response=True)
# basic pre-processing: merge all data if there is gaps, detrend, taper,
#  remove the seismic instrumental response to go from the digitizer units to ground motion (velocity) units.
N.merge(); N.detrend(type='linear');N[0].taper(max_percentage=0.05)
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mKeyError[0m                                  Traceback (most recent call last)
File [0;32m/usr/share/miniconda3/envs/geosmart/lib/python3.10/site-packages/obspy/core/util/base.py:408[0m, in [0;36m_read_from_plugin[0;34m(plugin_type, filename, format, **kwargs)[0m
[1;32m    407[0m [38;5;28;01mtry[39;00m:
[0;32m--> 408[0m     format_ep [38;5;241m=[39m [43meps[49m[43m[[49m[38;5;28;43mformat[39;49m[43m][49m
[1;32m    409[0m [38;5;28;01mexcept[39;00m ([38;5;167;01mKeyError[39;00m, [38;5;167;01mIndexError[39;00m):

[0;31mKeyError[0m: 'MSEED'

During handling of the above exception, another exception occurred:

[0;31mTypeError[0m                                 Traceback (most recent call last)
File [0;32m/usr/share/miniconda3/envs/geosmart/lib/python3.10/site-packages/obspy/core/util/base.py:624[0m, in [0;36m_generic_reader[0;34m(pathname_or_url, callback_func, **kwargs)[0m
[1;32m    622[0m [38;5;28;01mtry[39;00m:
[1;32m    623[0m     [38;5;66;03m# first try reading directly[39;00m
[0;32m--> 624[0m     generic [38;5;241m=[39m [43mcallback_func[49m[43m([49m[43mpathname_or_url[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m
[1;32m    625[0m [38;5;28;01mexcept[39;00m [38;5;167;01mTypeError[39;00m:
[1;32m    626[0m     [38;5;66;03m# if this fails, create a temporary file which is read directly[39;00m
[1;32m    627[0m     [38;5;66;03m# from the file system[39;00m

File [0;32m/usr/share/miniconda3/envs/geosmart/lib/python3.10/site-packages/decorator.py:232[0m, in [0;36mdecorate.<locals>.fun[0;34m(*args, **kw)[0m
[1;32m    231[0m     args, kw [38;5;241m=[39m fix(args, kw, sig)
[0;32m--> 232[0m [38;5;28;01mreturn[39;00m [43mcaller[49m[43m([49m[43mfunc[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[43m([49m[43mextras[49m[43m [49m[38;5;241;43m+[39;49m[43m [49m[43margs[49m[43m)[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkw[49m[43m)[49m

File [0;32m/usr/share/miniconda3/envs/geosmart/lib/python3.10/site-packages/obspy/core/util/decorator.py:142[0m, in [0;36muncompress_file[0;34m(func, filename, *args, **kwargs)[0m
[1;32m    141[0m [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m [38;5;28misinstance[39m(filename, [38;5;28mstr[39m):
[0;32m--> 142[0m     [38;5;28;01mreturn[39;00m [43mfunc[49m[43m([49m[43mfilename[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[43margs[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m
[1;32m    143[0m [38;5;28;01melif[39;00m [38;5;129;01mnot[39;00m Path(filename)[38;5;241m.[39mexists():

File [0;32m/usr/share/miniconda3/envs/geosmart/lib/python3.10/site-packages/obspy/core/stream.py:251[0m, in [0;36m_read[0;34m(filename, format, headonly, **kwargs)[0m
[1;32m    248[0m [38;5;124;03m"""[39;00m
[1;32m    249[0m [38;5;124;03mRead a single file into a ObsPy Stream object.[39;00m
[1;32m    250[0m [38;5;124;03m"""[39;00m
[0;32m--> 251[0m stream, [38;5;28mformat[39m [38;5;241m=[39m [43m_read_from_plugin[49m[43m([49m[38;5;124;43m'[39;49m[38;5;124;43mwaveform[39;49m[38;5;124;43m'[39;49m[43m,[49m[43m [49m[43mfilename[49m[43m,[49m[43m [49m[38;5;28;43mformat[39;49m[38;5;241;43m=[39;49m[38;5;28;43mformat[39;49m[43m,[49m
[1;32m    252[0m [43m                                   [49m[43mheadonly[49m[38;5;241;43m=[39;49m[43mheadonly[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m
[1;32m    253[0m [38;5;66;03m# set _format identifier for each element[39;00m

File [0;32m/usr/share/miniconda3/envs/geosmart/lib/python3.10/site-packages/obspy/core/util/base.py:411[0m, in [0;36m_read_from_plugin[0;34m(plugin_type, filename, format, **kwargs)[0m
[1;32m    410[0m         msg [38;5;241m=[39m [38;5;124m"[39m[38;5;124mFormat [39m[38;5;130;01m\"[39;00m[38;5;132;01m%s[39;00m[38;5;130;01m\"[39;00m[38;5;124m is not supported. Supported types: [39m[38;5;132;01m%s[39;00m[38;5;124m"[39m
[0;32m--> 411[0m         [38;5;28;01mraise[39;00m [38;5;167;01mTypeError[39;00m(msg [38;5;241m%[39m ([38;5;28mformat[39m, [38;5;124m'[39m[38;5;124m, [39m[38;5;124m'[39m[38;5;241m.[39mjoin(eps)))
[1;32m    412[0m [38;5;66;03m# file format should be known by now[39;00m

[0;31mTypeError[0m: Format "MSEED" is not supported. Supported types: 

During handling of the above exception, another exception occurred:

[0;31mKeyError[0m                                  Traceback (most recent call last)
File [0;32m/usr/share/miniconda3/envs/geosmart/lib/python3.10/site-packages/obspy/core/util/base.py:408[0m, in [0;36m_read_from_plugin[0;34m(plugin_type, filename, format, **kwargs)[0m
[1;32m    407[0m [38;5;28;01mtry[39;00m:
[0;32m--> 408[0m     format_ep [38;5;241m=[39m [43meps[49m[43m[[49m[38;5;28;43mformat[39;49m[43m][49m
[1;32m    409[0m [38;5;28;01mexcept[39;00m ([38;5;167;01mKeyError[39;00m, [38;5;167;01mIndexError[39;00m):

[0;31mKeyError[0m: 'MSEED'

During handling of the above exception, another exception occurred:

[0;31mTypeError[0m                                 Traceback (most recent call last)
Input [0;32mIn [4][0m, in [0;36m<cell line: 10>[0;34m()[0m
[1;32m      7[0m fdsn_client [38;5;241m=[39m fdsn[38;5;241m.[39mClient([38;5;124m'[39m[38;5;124mIRIS[39m[38;5;124m'[39m) [38;5;66;03m# client to query the IRIS DMC server[39;00m
[1;32m      9[0m [38;5;66;03m# call to download the specific data: earthquake waveforms[39;00m
[0;32m---> 10[0m Z [38;5;241m=[39m [43mfdsn_client[49m[38;5;241;43m.[39;49m[43mget_waveforms[49m[43m([49m[43mnetwork[49m[38;5;241;43m=[39;49m[43mnetwork[49m[43m,[49m[43m [49m[43mstation[49m[38;5;241;43m=[39;49m[43mstation[49m[43m,[49m[43m [49m[43mlocation[49m[38;5;241;43m=[39;49m[38;5;124;43m'[39;49m[38;5;124;43m--[39;49m[38;5;124;43m'[39;49m[43m,[49m[43m [49m[43mchannel[49m[38;5;241;43m=[39;49m[43mchannel[49m[43m,[49m[43m [49m[43mstarttime[49m[38;5;241;43m=[39;49m[43mTstart[49m[43m,[49m[43m [49m[43m\[49m
[1;32m     11[0m [43m    [49m[43mendtime[49m[38;5;241;43m=[39;49m[43mTend[49m[43m,[49m[43m [49m[43mattach_response[49m[38;5;241;43m=[39;49m[38;5;28;43;01mTrue[39;49;00m[43m)[49m
[1;32m     12[0m [38;5;66;03m# basic pre-processing: merge all data if there is gaps, detrend, taper,[39;00m
[1;32m     13[0m [38;5;66;03m#  remove the seismic instrumental response to go from the digitizer units to ground motion (velocity) units.[39;00m
[1;32m     14[0m Z[38;5;241m.[39mmerge(); Z[38;5;241m.[39mdetrend([38;5;28mtype[39m[38;5;241m=[39m[38;5;124m'[39m[38;5;124mlinear[39m[38;5;124m'[39m); Z[[38;5;241m0[39m][38;5;241m.[39mtaper(max_percentage[38;5;241m=[39m[38;5;241m0.05[39m)

File [0;32m/usr/share/miniconda3/envs/geosmart/lib/python3.10/site-packages/obspy/clients/fdsn/client.py:878[0m, in [0;36mClient.get_waveforms[0;34m(self, network, station, location, channel, starttime, endtime, quality, minimumlength, longestonly, filename, attach_response, **kwargs)[0m
[1;32m    876[0m     data_stream[38;5;241m.[39mclose()
[1;32m    877[0m [38;5;28;01melse[39;00m:
[0;32m--> 878[0m     st [38;5;241m=[39m [43mobspy[49m[38;5;241;43m.[39;49m[43mread[49m[43m([49m[43mdata_stream[49m[43m,[49m[43m [49m[38;5;28;43mformat[39;49m[38;5;241;43m=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mMSEED[39;49m[38;5;124;43m"[39;49m[43m)[49m
[1;32m    879[0m     data_stream[38;5;241m.[39mclose()
[1;32m    880[0m     [38;5;28;01mif[39;00m attach_response:

File [0;32m/usr/share/miniconda3/envs/geosmart/lib/python3.10/site-packages/decorator.py:232[0m, in [0;36mdecorate.<locals>.fun[0;34m(*args, **kw)[0m
[1;32m    230[0m [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m kwsyntax:
[1;32m    231[0m     args, kw [38;5;241m=[39m fix(args, kw, sig)
[0;32m--> 232[0m [38;5;28;01mreturn[39;00m [43mcaller[49m[43m([49m[43mfunc[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[43m([49m[43mextras[49m[43m [49m[38;5;241;43m+[39;49m[43m [49m[43margs[49m[43m)[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkw[49m[43m)[49m

File [0;32m/usr/share/miniconda3/envs/geosmart/lib/python3.10/site-packages/obspy/core/util/decorator.py:297[0m, in [0;36mmap_example_filename.<locals>._map_example_filename[0;34m(func, *args, **kwargs)[0m
[1;32m    295[0m                 [38;5;28;01mexcept[39;00m [38;5;167;01mIOError[39;00m:
[1;32m    296[0m                     [38;5;28;01mpass[39;00m
[0;32m--> 297[0m [38;5;28;01mreturn[39;00m [43mfunc[49m[43m([49m[38;5;241;43m*[39;49m[43margs[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m

File [0;32m/usr/share/miniconda3/envs/geosmart/lib/python3.10/site-packages/obspy/core/stream.py:208[0m, in [0;36mread[0;34m(pathname_or_url, format, headonly, starttime, endtime, nearest_sample, dtype, apply_calib, check_compression, **kwargs)[0m
[1;32m    206[0m     st [38;5;241m=[39m _create_example_stream(headonly[38;5;241m=[39mheadonly)
[1;32m    207[0m [38;5;28;01melse[39;00m:
[0;32m--> 208[0m     st [38;5;241m=[39m [43m_generic_reader[49m[43m([49m[43mpathname_or_url[49m[43m,[49m[43m [49m[43m_read[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m
[1;32m    210[0m [38;5;28;01mif[39;00m [38;5;28mlen[39m(st) [38;5;241m==[39m [38;5;241m0[39m:
[1;32m    211[0m     [38;5;28;01mif[39;00m [38;5;28misinstance[39m(pathname_or_url, Path):

File [0;32m/usr/share/miniconda3/envs/geosmart/lib/python3.10/site-packages/obspy/core/util/base.py:631[0m, in [0;36m_generic_reader[0;34m(pathname_or_url, callback_func, **kwargs)[0m
[1;32m    629[0m         [38;5;28;01mwith[39;00m NamedTemporaryFile() [38;5;28;01mas[39;00m fh:
[1;32m    630[0m             fh[38;5;241m.[39mwrite(pathname_or_url[38;5;241m.[39mread())
[0;32m--> 631[0m             generic [38;5;241m=[39m [43mcallback_func[49m[43m([49m[43mfh[49m[38;5;241;43m.[39;49m[43mname[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m
[1;32m    632[0m     [38;5;28;01mreturn[39;00m generic
[1;32m    633[0m [38;5;28;01melif[39;00m [38;5;28misinstance[39m(pathname_or_url, [38;5;28mbytes[39m) [38;5;129;01mand[39;00m \
[1;32m    634[0m         pathname_or_url[38;5;241m.[39mstrip()[38;5;241m.[39mstartswith([38;5;124mb[39m[38;5;124m'[39m[38;5;124m<[39m[38;5;124m'[39m):
[1;32m    635[0m     [38;5;66;03m# XML string[39;00m

File [0;32m/usr/share/miniconda3/envs/geosmart/lib/python3.10/site-packages/decorator.py:232[0m, in [0;36mdecorate.<locals>.fun[0;34m(*args, **kw)[0m
[1;32m    230[0m [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m kwsyntax:
[1;32m    231[0m     args, kw [38;5;241m=[39m fix(args, kw, sig)
[0;32m--> 232[0m [38;5;28;01mreturn[39;00m [43mcaller[49m[43m([49m[43mfunc[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[43m([49m[43mextras[49m[43m [49m[38;5;241;43m+[39;49m[43m [49m[43margs[49m[43m)[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkw[49m[43m)[49m

File [0;32m/usr/share/miniconda3/envs/geosmart/lib/python3.10/site-packages/obspy/core/util/decorator.py:208[0m, in [0;36muncompress_file[0;34m(func, filename, *args, **kwargs)[0m
[1;32m    205[0m                 result [38;5;241m+[39m[38;5;241m=[39m stream
[1;32m    206[0m [38;5;28;01melse[39;00m:
[1;32m    207[0m     [38;5;66;03m# no compressions[39;00m
[0;32m--> 208[0m     result [38;5;241m=[39m [43mfunc[49m[43m([49m[43mfilename[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[43margs[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m
[1;32m    209[0m [38;5;28;01mreturn[39;00m result

File [0;32m/usr/share/miniconda3/envs/geosmart/lib/python3.10/site-packages/obspy/core/stream.py:251[0m, in [0;36m_read[0;34m(filename, format, headonly, **kwargs)[0m
[1;32m    246[0m [38;5;129m@uncompress_file[39m
[1;32m    247[0m [38;5;28;01mdef[39;00m [38;5;21m_read[39m(filename, [38;5;28mformat[39m[38;5;241m=[39m[38;5;28;01mNone[39;00m, headonly[38;5;241m=[39m[38;5;28;01mFalse[39;00m, [38;5;241m*[39m[38;5;241m*[39mkwargs):
[1;32m    248[0m     [38;5;124;03m"""[39;00m
[1;32m    249[0m [38;5;124;03m    Read a single file into a ObsPy Stream object.[39;00m
[1;32m    250[0m [38;5;124;03m    """[39;00m
[0;32m--> 251[0m     stream, [38;5;28mformat[39m [38;5;241m=[39m [43m_read_from_plugin[49m[43m([49m[38;5;124;43m'[39;49m[38;5;124;43mwaveform[39;49m[38;5;124;43m'[39;49m[43m,[49m[43m [49m[43mfilename[49m[43m,[49m[43m [49m[38;5;28;43mformat[39;49m[38;5;241;43m=[39;49m[38;5;28;43mformat[39;49m[43m,[49m
[1;32m    252[0m [43m                                       [49m[43mheadonly[49m[38;5;241;43m=[39;49m[43mheadonly[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m
[1;32m    253[0m     [38;5;66;03m# set _format identifier for each element[39;00m
[1;32m    254[0m     [38;5;28;01mfor[39;00m trace [38;5;129;01min[39;00m stream:

File [0;32m/usr/share/miniconda3/envs/geosmart/lib/python3.10/site-packages/obspy/core/util/base.py:411[0m, in [0;36m_read_from_plugin[0;34m(plugin_type, filename, format, **kwargs)[0m
[1;32m    409[0m     [38;5;28;01mexcept[39;00m ([38;5;167;01mKeyError[39;00m, [38;5;167;01mIndexError[39;00m):
[1;32m    410[0m         msg [38;5;241m=[39m [38;5;124m"[39m[38;5;124mFormat [39m[38;5;130;01m\"[39;00m[38;5;132;01m%s[39;00m[38;5;130;01m\"[39;00m[38;5;124m is not supported. Supported types: [39m[38;5;132;01m%s[39;00m[38;5;124m"[39m
[0;32m--> 411[0m         [38;5;28;01mraise[39;00m [38;5;167;01mTypeError[39;00m(msg [38;5;241m%[39m ([38;5;28mformat[39m, [38;5;124m'[39m[38;5;124m, [39m[38;5;124m'[39m[38;5;241m.[39mjoin(eps)))
[1;32m    412[0m [38;5;66;03m# file format should be known by now[39;00m
[1;32m    413[0m [38;5;28;01mtry[39;00m:
[1;32m    414[0m     [38;5;66;03m# search readFormat for given entry point[39;00m

[0;31mTypeError[0m: Format "MSEED" is not supported. Supported types: 
TypeError: Format "MSEED" is not supported. Supported types: 

